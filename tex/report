#!/usr/bin/env python3

import os
import argparse
from jinja2 import Environment, FileSystemLoader, select_autoescape
import os
import shutil
import datetime
import tarfile
import numpy as np
import importlib
import sys
import yaml


def is_valid_file(parser, arg):
    if not os.path.exists(arg):
        parser.error("The file {} does not exist!".format(arg))
    # elif not arg.endswith(".tar.gz"):
    #     parser.error("The file {} does not have .tar.gz ending!".format(arg))
    else:
        return arg

def get_template_names():
    template_names = list()
    for _file_name in os.listdir("templates"):
        _full_file_name = os.path.join("templates", _file_name)
        _full_template_name = os.path.join(_full_file_name, "{}.jinja.tex".format(_file_name))
        if (os.path.isdir(_full_file_name)) and os.path.exists(_full_template_name):
            template_names.append(_file_name)

    template_names.sort()
    return template_names

def read_data(filename):
    _tar = tarfile.open(name=filename, mode="r")
    _tar.extractall("build/")

    with open("build/out/config.yaml", 'r') as stream:
        try:
            data = yaml.load(stream)
        except yaml.YAMLError as exc:
            print(exc)
    

    times = np.genfromtxt("build/out/times.csv", skip_header=1, delimiter=',')
    times[:, 2] -= times[0, 1]
    times[:, 1] -= times[0, 1]

    data["times"] = times

    data["nb_cells"] = data["nb_cells_per_layer"] * data["world_size"]
    return data

def jinja_to_tex(template_name, options):
    env = Environment(
        block_start_string = '\BLOCK{',
        block_end_string = '}',
        variable_start_string = '\VAR{',
        variable_end_string = '}',
        comment_start_string = '\#{',
        comment_end_string = '}',
        line_statement_prefix = '%%',
        line_comment_prefix = '%#',
        trim_blocks = True,
        autoescape = False,
        loader = FileSystemLoader(os.path.abspath("."))
    )

    for file_name in ["header", "commands", "packages"]:
        template = env.get_template("{}.jinja.tex".format(file_name))
        renderer_template = template.render(**options)
        with open("build/{}.tex".format(file_name), "w") as f:
            f.write(renderer_template)
            
    # Render Main Template
    template_path = "templates/{}/{}.jinja.tex".format(template_name, template_name)
    if not os.path.exists(template_path):
        raise ValueError('The template "{}" does not exist'.format(template_path))

    _src = "templates/{}/".format(template_name)
    _dest = "build/"
    _src_files = os.listdir(_src)
    for _file_name in _src_files:
        _no_copy = [
            ".DS_Store",
            "{}.jinja.tex".format(template_name),
            "{}.py".format(template_name)]
        if not _file_name in _no_copy:
            _full_file_name = os.path.join(_src, _file_name)
            if (os.path.isfile(_full_file_name)):
                shutil.copy(_full_file_name, _dest)
            
    template = env.get_template(template_path)
    renderer_template = template.render(**options)
    with open("build/{}.tex".format(template_name), "w") as f:
        f.write(renderer_template)

def tex_to_pdf(template_name):
    os.system("(cd build; latexmk -quiet -pdf -f {}.tex > /dev/null 2>&1)".format(template_name))

if __name__ == "__main__":

    # Parsing
    template_names = get_template_names()
    parser = argparse.ArgumentParser(description='Generate Reports of MC-MPI run(s).')
    parser.add_argument('type', choices=template_names, help="""The type of report to generate.
        Corresponds to folders in tex/templates. Generate tex/templates/<name>/<name>.jinja.tex
        to generate a new template with name <name>.""")
    parser.add_argument("filename", type=lambda x: is_valid_file(parser, x), metavar="FILE",
        help="""Path of data file generated by the mcmpi application in .tar.gz format.""")
    args = parser.parse_args()
    template_name = args.type

    print("Generating report. This may take a while.")

    # Nuke Build
    if os.path.exists("build"):
        shutil.rmtree("build")
    os.mkdir("build")

    print("Reading run data ... ", end="")
    sys.stdout.flush()
    data = read_data(args.filename)
    print("done")
    data["date"] = datetime.date.today().strftime('%B %-d, %Y')

    # Parse Data
    shutil.copyfile("templates/{}/{}.py".format(template_name, template_name),
        "__tmp_{}.py".format(template_name))
    my_module = importlib.import_module('__tmp_{}'.format(template_name))
    os.remove("__tmp_{}.py".format(template_name))
    print("Parsing Data, Creating figures, etc. ... ", end="")
    sys.stdout.flush()
    my_module.parse_data(data, "build")
    print("done")

    # Render jinja -> tex -> pdf
    print("Rendering .jinja.tex to .tex ... ", end="")
    sys.stdout.flush()
    jinja_to_tex(template_name, data)
    print("done")

    print("Calling latexmk ... ", end="")
    sys.stdout.flush()
    tex_to_pdf(template_name)
    print("done")

    
    